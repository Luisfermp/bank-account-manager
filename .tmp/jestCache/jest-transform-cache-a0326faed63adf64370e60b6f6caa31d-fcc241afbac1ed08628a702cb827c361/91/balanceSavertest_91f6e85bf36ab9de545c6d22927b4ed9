fccfcffd31a32ac1f8b214ca7fcfc298
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const balanceSaver_1 = __importDefault(require("@backoffice/accounts/application/save/balanceSaver"));
const saveBalanceCommandHandler_1 = __importDefault(require("@backoffice/accounts/application/save/saveBalanceCommandHandler"));
const accountRepository_mock_1 = __importDefault(require("@backoffice/accounts/__mocks__/accountRepository.mock"));
const saveBalanceCommand_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/saveBalanceCommand.mother"));
const eventBus_mock_1 = __importDefault(require("@shared/__mocks__/eventBus.mock"));
const account_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/account.mother"));
const accountId_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/accountId.mother"));
const balance_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/balance.mother"));
const accountBalanceUpdated_1 = __importDefault(require("@backoffice/accounts/domain/accountBalanceUpdated"));
const accountBalanceCreated_1 = __importDefault(require("@backoffice/accounts/domain/accountBalanceCreated"));
describe('balanceSaver', () => {
    it('should create the balance when there isn\'t stored in our system', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = saveBalanceCommand_mother_1.default.random(), updater = new balanceSaver_1.default(repository, bus), handler = new saveBalanceCommandHandler_1.default(updater);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        repository.assertSaveIsCalled();
    });
    it('should publish AccountBalanceCreatedDomainEvent', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = saveBalanceCommand_mother_1.default.random(), updater = new balanceSaver_1.default(repository, bus), handler = new saveBalanceCommandHandler_1.default(updater);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        bus.assertLastPublishedEventTypeIs(accountBalanceCreated_1.default);
    });
    it('should update the balance', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = saveBalanceCommand_mother_1.default.randomWithPositiveAmount(), account = account_mother_1.default.random(), updater = new balanceSaver_1.default(repository, bus), handler = new saveBalanceCommandHandler_1.default(updater), expected = account_mother_1.default.random({
            id: account.id,
            balance: balance_mother_1.default.create(account.balance.value + command.amount)
        });
        repository.whenGetThenReturn(account);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        repository.assertSaveIsCalledWith(expected);
    });
    it('should publish AccountBalanceUpdatedDomainEvent', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = saveBalanceCommand_mother_1.default.randomWithPositiveAmount(), account = account_mother_1.default.random(), updater = new balanceSaver_1.default(repository, bus), handler = new saveBalanceCommandHandler_1.default(updater);
        repository.whenGetThenReturn(account);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        bus.assertLastPublishedEventTypeIs(accountBalanceUpdated_1.default);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,