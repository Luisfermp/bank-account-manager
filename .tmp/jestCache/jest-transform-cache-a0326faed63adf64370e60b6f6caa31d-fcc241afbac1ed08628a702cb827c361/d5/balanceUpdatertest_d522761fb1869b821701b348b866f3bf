5603c5d62cf1ab1c359dacd4a4551c34
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const balanceUpdater_1 = __importDefault(require("@backoffice/accounts/application/update/balanceUpdater"));
const updateBalanceCommandHandler_1 = __importDefault(require("@backoffice/accounts/application/update/updateBalanceCommandHandler"));
const accountNotFound_1 = __importDefault(require("@backoffice/accounts/domain/accountNotFound"));
const accountRepository_mock_1 = __importDefault(require("@backoffice/accounts/__mocks__/accountRepository.mock"));
const updateBalanceCommand_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/updateBalanceCommand.mother"));
const eventBus_mock_1 = __importDefault(require("@shared/__mocks__/eventBus.mock"));
const account_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/account.mother"));
const accountId_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/accountId.mother"));
const balance_mother_1 = __importDefault(require("@backoffice/accounts/__mothers__/balance.mother"));
const invalidArgumentError_1 = __importDefault(require("@shared/domain/invalidArgumentError"));
const accountBalanceUpdated_1 = __importDefault(require("@backoffice/accounts/domain/accountBalanceUpdated"));
describe('balanceUpdater', () => {
    it('should throw AccountNotFount when try to update balance for an unexistent account', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = updateBalanceCommand_mother_1.default.random(), updater = new balanceUpdater_1.default(repository, bus), handler = new updateBalanceCommandHandler_1.default(updater);
        await expect(handler.handle(command)).rejects.toThrow(accountNotFound_1.default);
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
    });
    it('should throw InvalidArgumentError when the new balance is negative', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = updateBalanceCommand_mother_1.default.randomWithNegativeAmount(), account = account_mother_1.default.randomWithAmountZero(), updater = new balanceUpdater_1.default(repository, bus), handler = new updateBalanceCommandHandler_1.default(updater);
        repository.whenGetThenReturn(account);
        await expect(handler.handle(command)).rejects.toThrow(invalidArgumentError_1.default);
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
    });
    it('should update the balance', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = updateBalanceCommand_mother_1.default.randomWithPositiveAmount(), account = account_mother_1.default.random(), updater = new balanceUpdater_1.default(repository, bus), handler = new updateBalanceCommandHandler_1.default(updater), expected = account_mother_1.default.random({
            id: account.id,
            balance: balance_mother_1.default.create(account.balance.value + command.amount)
        });
        repository.whenGetThenReturn(account);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        repository.assertUpdateIsCalled(expected);
    });
    it('should publish AccountBalanceUpdatedDomainEvent', async () => {
        expect.hasAssertions();
        const repository = new accountRepository_mock_1.default(), bus = new eventBus_mock_1.default(), command = updateBalanceCommand_mother_1.default.randomWithPositiveAmount(), account = account_mother_1.default.random(), updater = new balanceUpdater_1.default(repository, bus), handler = new updateBalanceCommandHandler_1.default(updater);
        repository.whenGetThenReturn(account);
        await expect(handler.handle(command)).resolves.toBeUndefined();
        repository.assertGetIsCalled(accountId_mother_1.default.create(command.accountId));
        bus.assertLastPublishedEventTypeIs(accountBalanceUpdated_1.default);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvb3B0aXZhbWVkaWEvRG9jdW1lbnRzL1BlcnNvbmFsL2JhbmstYWNjb3VudC1tYW5hZ2VyL3NlcnZlci9jb250ZXh0cy9iYWNrb2ZmaWNlL2FjY291bnRzL2FwcGxpY2F0aW9uL3VwZGF0ZS9iYWxhbmNlVXBkYXRlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNEdBQW9GO0FBQ3BGLHNJQUE4RztBQUM5RyxrR0FBMEU7QUFDMUUsbUhBQTBGO0FBQzFGLCtIQUFzRztBQUN0RyxvRkFBMkQ7QUFDM0QscUdBQTRFO0FBQzVFLHlHQUFnRjtBQUNoRixxR0FBNEU7QUFDNUUsK0ZBQXVFO0FBQ3ZFLDhHQUFpRztBQUVqRyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzVCLEVBQUUsQ0FBQyxtRkFBbUYsRUFBRSxLQUFLLElBQUksRUFBRTtRQUMvRixNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsTUFBTSxVQUFVLEdBQUcsSUFBSSxnQ0FBcUIsRUFBRSxFQUMxQyxHQUFHLEdBQUcsSUFBSSx1QkFBWSxFQUFFLEVBQ3hCLE9BQU8sR0FBRyxxQ0FBMEIsQ0FBQyxNQUFNLEVBQUUsRUFDN0MsT0FBTyxHQUFHLElBQUksd0JBQWMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQzdDLE9BQU8sR0FBRyxJQUFJLHFDQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZELE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHlCQUFlLENBQUMsQ0FBQztRQUN2RSxVQUFVLENBQUMsaUJBQWlCLENBQUMsMEJBQWUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0VBQW9FLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEYsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZC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QWdDLENBQUMsQ0FBQztJQUN6RSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL29wdGl2YW1lZGlhL0RvY3VtZW50cy9QZXJzb25hbC9iYW5rLWFjY291bnQtbWFuYWdlci9zZXJ2ZXIvY29udGV4dHMvYmFja29mZmljZS9hY2NvdW50cy9hcHBsaWNhdGlvbi91cGRhdGUvYmFsYW5jZVVwZGF0ZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFsYW5jZVVwZGF0ZXIgZnJvbSAnQGJhY2tvZmZpY2UvYWNjb3VudHMvYXBwbGljYXRpb24vdXBkYXRlL2JhbGFuY2VVcGRhdGVyJztcbmltcG9ydCBVcGRhdGVCYWxhbmNlQ29tbWFuZEhhbmRsZXIgZnJvbSAnQGJhY2tvZmZpY2UvYWNjb3VudHMvYXBwbGljYXRpb24vdXBkYXRlL3VwZGF0ZUJhbGFuY2VDb21tYW5kSGFuZGxlcic7XG5pbXBvcnQgQWNjb3VudE5vdEZvdW5kIGZyb20gJ0BiYWNrb2ZmaWNlL2FjY291bnRzL2RvbWFpbi9hY2NvdW50Tm90Rm91bmQnO1xuaW1wb3J0IEFjY291bnRSZXBvc2l0b3J5TW9jayBmcm9tICdAYmFja29mZmljZS9hY2NvdW50cy9fX21vY2tzX18vYWNjb3VudFJlcG9zaXRvcnkubW9jayc7XG5pbXBvcnQgVXBkYXRlQmFsYW5jZUNvbW1hbmRNb3RoZXIgZnJvbSAnQGJhY2tvZmZpY2UvYWNjb3VudHMvX19tb3RoZXJzX18vdXBkYXRlQmFsYW5jZUNvbW1hbmQubW90aGVyJztcbmltcG9ydCBFdmVudEJ1c01vY2sgZnJvbSAnQHNoYXJlZC9fX21vY2tzX18vZXZlbnRCdXMubW9jayc7XG5pbXBvcnQgQWNjb3VudE1vdGhlciBmcm9tICdAYmFja29mZmljZS9hY2NvdW50cy9fX21vdGhlcnNfXy9hY2NvdW50Lm1vdGhlcic7XG5pbXBvcnQgQWNjb3VudElkTW90aGVyIGZyb20gJ0BiYWNrb2ZmaWNlL2FjY291bnRzL19fbW90aGVyc19fL2FjY291bnRJZC5tb3RoZXInO1xuaW1wb3J0IEJhbGFuY2VNb3RoZXIgZnJvbSAnQGJhY2tvZmZpY2UvYWNjb3VudHMvX19tb3RoZXJzX18vYmFsYW5jZS5tb3RoZXInO1xuaW1wb3J0IEludmFsaWRBcmd1bWVudEVycm9yIGZyb20gJ0BzaGFyZWQvZG9tYWluL2ludmFsaWRBcmd1bWVudEVycm9yJztcbmltcG9ydCBBY2NvdW50QmFsYW5jZVVwZGF0ZWREb21haW5FdmVudCBmcm9tICdAYmFja29mZmljZS9hY2NvdW50cy9kb21haW4vYWNjb3VudEJhbGFuY2VVcGRhdGVkJztcblxuZGVzY3JpYmUoJ2JhbGFuY2VVcGRhdGVyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdGhyb3cgQWNjb3VudE5vdEZvdW50IHdoZW4gdHJ5IHRvIHVwZGF0ZSBiYWxhbmNlIGZvciBhbiB1bmV4aXN0ZW50IGFjY291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdC5oYXNBc3NlcnRpb25zKCk7XG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgQWNjb3VudFJlcG9zaXRvcnlNb2NrKCksXG4gICAgICAgICAgICBidXMgPSBuZXcgRXZlbnRCdXNNb2NrKCksXG4gICAgICAgICAgICBjb21tYW5kID0gVXBkYXRlQmFsYW5jZUNvbW1hbmRNb3RoZXIucmFuZG9tKCksXG4gICAgICAgICAgICB1cGRhdGVyID0gbmV3IEJhbGFuY2VVcGRhdGVyKHJlcG9zaXRvcnksIGJ1cyksXG4gICAgICAgICAgICBoYW5kbGVyID0gbmV3IFVwZGF0ZUJhbGFuY2VDb21tYW5kSGFuZGxlcih1cGRhdGVyKTtcblxuICAgICAgICBhd2FpdCBleHBlY3QoaGFuZGxlci5oYW5kbGUoY29tbWFuZCkpLnJlamVjdHMudG9UaHJvdyhBY2NvdW50Tm90Rm91bmQpO1xuICAgICAgICByZXBvc2l0b3J5LmFzc2VydEdldElzQ2FsbGVkKEFjY291bnRJZE1vdGhlci5jcmVhdGUoY29tbWFuZC5hY2NvdW50SWQpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgSW52YWxpZEFyZ3VtZW50RXJyb3Igd2hlbiB0aGUgbmV3IGJhbGFuY2UgaXMgbmVnYXRpdmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdC5oYXNBc3NlcnRpb25zKCk7XG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgQWNjb3VudFJlcG9zaXRvcnlNb2NrKCksXG4gICAgICAgICAgICBidXMgPSBuZXcgRXZlbnRCdXNNb2NrKCksXG4gICAgICAgICAgICBjb21tYW5kID0gVXBkYXRlQmFsYW5jZUNvbW1hbmRNb3RoZXIucmFuZG9tV2l0aE5lZ2F0aXZlQW1vdW50KCksXG4gICAgICAgICAgICBhY2NvdW50ID0gQWNjb3VudE1vdGhlci5yYW5kb21XaXRoQW1vdW50WmVybygpLFxuICAgICAgICAgICAgdXBkYXRlciA9IG5ldyBCYWxhbmNlVXBkYXRlcihyZXBvc2l0b3J5LCBidXMpLFxuICAgICAgICAgICAgaGFuZGxlciA9IG5ldyBVcGRhdGVCYWxhbmNlQ29tbWFuZEhhbmRsZXIodXBkYXRlcik7XG5cbiAgICAgICAgcmVwb3NpdG9yeS53aGVuR2V0VGhlblJldHVybihhY2NvdW50KTtcblxuICAgICAgICBhd2FpdCBleHBlY3QoaGFuZGxlci5oYW5kbGUoY29tbWFuZCkpLnJlamVjdHMudG9UaHJvdyhJbnZhbGlkQXJndW1lbnRFcnJvcik7XG4gICAgICAgIHJlcG9zaXRvcnkuYXNzZXJ0R2V0SXNDYWxsZWQoQWNjb3VudElkTW90aGVyLmNyZWF0ZShjb21tYW5kLmFjY291bnRJZCkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIGJhbGFuY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdC5oYXNBc3NlcnRpb25zKCk7XG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgQWNjb3VudFJlcG9zaXRvcnlNb2NrKCksXG4gICAgICAgICAgICBidXMgPSBuZXcgRXZlbnRCdXNNb2NrKCksXG4gICAgICAgICAgICBjb21tYW5kID0gVXBkYXRlQmFsYW5jZUNvbW1hbmRNb3RoZXIucmFuZG9tV2l0aFBvc2l0aXZlQW1vdW50KCksXG4gICAgICAgICAgICBhY2NvdW50ID0gQWNjb3VudE1vdGhlci5yYW5kb20oKSxcbiAgICAgICAgICAgIHVwZGF0ZXIgPSBuZXcgQmFsYW5jZVVwZGF0ZXIocmVwb3NpdG9yeSwgYnVzKSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBuZXcgVXBkYXRlQmFsYW5jZUNvbW1hbmRIYW5kbGVyKHVwZGF0ZXIpLFxuICAgICAgICAgICAgZXhwZWN0ZWQgPSBBY2NvdW50TW90aGVyLnJhbmRvbSh7XG4gICAgICAgICAgICAgICAgaWQ6IGFjY291bnQuaWQsXG4gICAgICAgICAgICAgICAgYmFsYW5jZTogQmFsYW5jZU1vdGhlci5jcmVhdGUoYWNjb3VudC5iYWxhbmNlLnZhbHVlICsgY29tbWFuZC5hbW91bnQpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXBvc2l0b3J5LndoZW5HZXRUaGVuUmV0dXJuKGFjY291bnQpO1xuXG4gICAgICAgIGF3YWl0IGV4cGVjdChoYW5kbGVyLmhhbmRsZShjb21tYW5kKSkucmVzb2x2ZXMudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICByZXBvc2l0b3J5LmFzc2VydEdldElzQ2FsbGVkKEFjY291bnRJZE1vdGhlci5jcmVhdGUoY29tbWFuZC5hY2NvdW50SWQpKTtcbiAgICAgICAgcmVwb3NpdG9yeS5hc3NlcnRVcGRhdGVJc0NhbGxlZChleHBlY3RlZCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHB1Ymxpc2ggQWNjb3VudEJhbGFuY2VVcGRhdGVkRG9tYWluRXZlbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGV4cGVjdC5oYXNBc3NlcnRpb25zKCk7XG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBuZXcgQWNjb3VudFJlcG9zaXRvcnlNb2NrKCksXG4gICAgICAgICAgICBidXMgPSBuZXcgRXZlbnRCdXNNb2NrKCksXG4gICAgICAgICAgICBjb21tYW5kID0gVXBkYXRlQmFsYW5jZUNvbW1hbmRNb3RoZXIucmFuZG9tV2l0aFBvc2l0aXZlQW1vdW50KCksXG4gICAgICAgICAgICBhY2NvdW50ID0gQWNjb3VudE1vdGhlci5yYW5kb20oKSxcbiAgICAgICAgICAgIHVwZGF0ZXIgPSBuZXcgQmFsYW5jZVVwZGF0ZXIocmVwb3NpdG9yeSwgYnVzKSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBuZXcgVXBkYXRlQmFsYW5jZUNvbW1hbmRIYW5kbGVyKHVwZGF0ZXIpO1xuXG4gICAgICAgIHJlcG9zaXRvcnkud2hlbkdldFRoZW5SZXR1cm4oYWNjb3VudCk7XG5cbiAgICAgICAgYXdhaXQgZXhwZWN0KGhhbmRsZXIuaGFuZGxlKGNvbW1hbmQpKS5yZXNvbHZlcy50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgIHJlcG9zaXRvcnkuYXNzZXJ0R2V0SXNDYWxsZWQoQWNjb3VudElkTW90aGVyLmNyZWF0ZShjb21tYW5kLmFjY291bnRJZCkpO1xuICAgICAgICBidXMuYXNzZXJ0TGFzdFB1Ymxpc2hlZEV2ZW50VHlwZUlzKEFjY291bnRCYWxhbmNlVXBkYXRlZERvbWFpbkV2ZW50KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9