{"file":"/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.test.ts","mappings":"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","names":[],"sources":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.test.ts"],"sourcesContent":["import BalanceUpdater from '@backoffice/accounts/application/update/balanceUpdater';\nimport UpdateBalanceCommandHandler from '@backoffice/accounts/application/update/updateBalanceCommandHandler';\nimport AccountNotFound from '@backoffice/accounts/domain/accountNotFound';\nimport AccountRepositoryMock from '@backoffice/accounts/__mocks__/accountRepository.mock';\nimport UpdateBalanceCommandMother from '@backoffice/accounts/__mothers__/updateBalanceCommand.mother';\nimport EventBusMock from '@shared/__mocks__/eventBus.mock';\nimport AccountMother from '@backoffice/accounts/__mothers__/account.mother';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport BalanceMother from '@backoffice/accounts/__mothers__/balance.mother';\nimport InvalidArgumentError from '@shared/domain/invalidArgumentError';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\n\ndescribe('balanceUpdater', () => {\n    it('should throw AccountNotFount when try to update balance for an unexistent account', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        await expect(handler.handle(command)).rejects.toThrow(AccountNotFound);\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n    });\n\n    it('should throw InvalidArgumentError when the new balance is negative', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithNegativeAmount(),\n            account = AccountMother.randomWithAmountZero(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).rejects.toThrow(InvalidArgumentError);\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n    });\n\n    it('should update the balance', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater),\n            expected = AccountMother.random({\n                id: account.id,\n                balance: BalanceMother.create(account.balance.value + command.amount)\n            });\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertUpdateIsCalled(expected);\n    });\n\n    it('should publish AccountBalanceUpdatedDomainEvent', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        bus.assertLastPublishedEventTypeIs(AccountBalanceUpdatedDomainEvent);\n    });\n});\n"],"version":3}