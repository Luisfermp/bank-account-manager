{"file":"/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mocks__/accountRepository.mock.ts","mappings":";;AAMA,MAAqB,qBAAqB;IAA1C;QACY,UAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAElB,aAAQ,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IA6BjC,CAAC;IA3BG,GAAG,CAAC,SAAoB;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,iBAAiB,CAAC,OAAgB;QAC9B,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,iBAAiB,CAAC,SAAoB;QAClC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,OAAgB;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,oBAAoB,CAAC,OAAgB;QACjC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAChC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,EAClC,cAAc,GAAY,QAAQ,CAAC,CAAC,CAAC,EACrC,UAAU,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;QAC/C,MAAM,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC;YAC7B,GAAG,OAAO,CAAC,YAAY,EAAE;YACzB,4HAA4H;YAC5H,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;SAChC,CAAC,CAAC;IACP,CAAC;CACJ;AAhCD,wCAgCC","names":[],"sources":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mocks__/accountRepository.mock.ts"],"sourcesContent":["/* eslint-disable jest/no-standalone-expect */\nimport Account from '@backoffice/accounts/domain/account';\nimport AccountId from '@backoffice/accounts/domain/accountId';\nimport AccountRepository from '@backoffice/accounts/domain/accountRepository';\nimport { Nullable } from '@shared/domain/nullable';\n\nexport default class AccountRepositoryMock implements AccountRepository {\n    private getFn = jest.fn();\n\n    private updateFn = jest.fn();\n\n    get(accountId: AccountId): Promise<Nullable<Account>> {\n        return this.getFn(accountId);\n    }\n\n    whenGetThenReturn(account: Account): void {\n        this.getFn.mockResolvedValue(account);\n    }\n\n    assertGetIsCalled(accountId: AccountId): void {\n        expect(this.getFn).toHaveBeenCalledWith(accountId);\n    }\n\n    update(account: Account): Promise<void> {\n        return this.updateFn(account);\n    }\n\n    assertUpdateIsCalled(account: Account): void {\n        const { calls } = this.updateFn.mock,\n            lastCall = calls[calls.length - 1],\n            accountUpdated: Account = lastCall[0],\n            primitives = accountUpdated.toPrimitives();\n        expect(primitives).toStrictEqual({\n            ...account.toPrimitives(),\n            //* FIXME: try to find another way to manage date update --> Because it could be a difference between given and updated date\n            updatedAt: expect.any(String)\n        });\n    }\n}\n"],"version":3}