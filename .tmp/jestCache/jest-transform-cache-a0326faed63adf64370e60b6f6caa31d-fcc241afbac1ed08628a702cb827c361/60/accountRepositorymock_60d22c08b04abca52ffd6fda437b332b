9578c3584b6428a154bef2353f02230c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class AccountRepositoryMock {
    constructor() {
        this.getFn = jest.fn();
        this.updateFn = jest.fn();
    }
    get(accountId) {
        return this.getFn(accountId);
    }
    whenGetThenReturn(account) {
        this.getFn.mockResolvedValue(account);
    }
    assertGetIsCalled(accountId) {
        expect(this.getFn).toHaveBeenCalledWith(accountId);
    }
    update(account) {
        return this.updateFn(account);
    }
    assertUpdateIsCalled(account) {
        const { calls } = this.updateFn.mock, lastCall = calls[calls.length - 1], accountUpdated = lastCall[0], primitives = accountUpdated.toPrimitives();
        expect(primitives).toStrictEqual({
            ...account.toPrimitives(),
            //* FIXME: try to find another way to manage date update --> Because it could be a difference between given and updated date
            updatedAt: expect.any(String)
        });
    }
}
exports.default = AccountRepositoryMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvb3B0aXZhbWVkaWEvRG9jdW1lbnRzL1BlcnNvbmFsL2JhbmstYWNjb3VudC1tYW5hZ2VyL3NlcnZlci9jb250ZXh0cy9iYWNrb2ZmaWNlL2FjY291bnRzL19fbW9ja3NfXy9hY2NvdW50UmVwb3NpdG9yeS5tb2NrLnRzIiwibWFwcGluZ3MiOiI7O0FBTUEsTUFBcUIscUJBQXFCO0lBQTFDO1FBQ1ksVUFBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUVsQixhQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBNkJqQyxDQUFDO0lBM0JHLEdBQUcsQ0FBQyxTQUFvQjtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELGlCQUFpQixDQUFDLE9BQWdCO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELGlCQUFpQixDQUFDLFNBQW9CO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFnQjtRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELG9CQUFvQixDQUFDLE9BQWdCO1FBQ2pDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFDaEMsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUNsQyxjQUFjLEdBQVksUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUNyQyxVQUFVLEdBQUcsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDN0IsR0FBRyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3pCLDRIQUE0SDtZQUM1SCxTQUFTLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBaENELHdDQWdDQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9vcHRpdmFtZWRpYS9Eb2N1bWVudHMvUGVyc29uYWwvYmFuay1hY2NvdW50LW1hbmFnZXIvc2VydmVyL2NvbnRleHRzL2JhY2tvZmZpY2UvYWNjb3VudHMvX19tb2Nrc19fL2FjY291bnRSZXBvc2l0b3J5Lm1vY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgamVzdC9uby1zdGFuZGFsb25lLWV4cGVjdCAqL1xuaW1wb3J0IEFjY291bnQgZnJvbSAnQGJhY2tvZmZpY2UvYWNjb3VudHMvZG9tYWluL2FjY291bnQnO1xuaW1wb3J0IEFjY291bnRJZCBmcm9tICdAYmFja29mZmljZS9hY2NvdW50cy9kb21haW4vYWNjb3VudElkJztcbmltcG9ydCBBY2NvdW50UmVwb3NpdG9yeSBmcm9tICdAYmFja29mZmljZS9hY2NvdW50cy9kb21haW4vYWNjb3VudFJlcG9zaXRvcnknO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICdAc2hhcmVkL2RvbWFpbi9udWxsYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY291bnRSZXBvc2l0b3J5TW9jayBpbXBsZW1lbnRzIEFjY291bnRSZXBvc2l0b3J5IHtcbiAgICBwcml2YXRlIGdldEZuID0gamVzdC5mbigpO1xuXG4gICAgcHJpdmF0ZSB1cGRhdGVGbiA9IGplc3QuZm4oKTtcblxuICAgIGdldChhY2NvdW50SWQ6IEFjY291bnRJZCk6IFByb21pc2U8TnVsbGFibGU8QWNjb3VudD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm4oYWNjb3VudElkKTtcbiAgICB9XG5cbiAgICB3aGVuR2V0VGhlblJldHVybihhY2NvdW50OiBBY2NvdW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZ2V0Rm4ubW9ja1Jlc29sdmVkVmFsdWUoYWNjb3VudCk7XG4gICAgfVxuXG4gICAgYXNzZXJ0R2V0SXNDYWxsZWQoYWNjb3VudElkOiBBY2NvdW50SWQpOiB2b2lkIHtcbiAgICAgICAgZXhwZWN0KHRoaXMuZ2V0Rm4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGFjY291bnRJZCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKGFjY291bnQ6IEFjY291bnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlRm4oYWNjb3VudCk7XG4gICAgfVxuXG4gICAgYXNzZXJ0VXBkYXRlSXNDYWxsZWQoYWNjb3VudDogQWNjb3VudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNhbGxzIH0gPSB0aGlzLnVwZGF0ZUZuLm1vY2ssXG4gICAgICAgICAgICBsYXN0Q2FsbCA9IGNhbGxzW2NhbGxzLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgYWNjb3VudFVwZGF0ZWQ6IEFjY291bnQgPSBsYXN0Q2FsbFswXSxcbiAgICAgICAgICAgIHByaW1pdGl2ZXMgPSBhY2NvdW50VXBkYXRlZC50b1ByaW1pdGl2ZXMoKTtcbiAgICAgICAgZXhwZWN0KHByaW1pdGl2ZXMpLnRvU3RyaWN0RXF1YWwoe1xuICAgICAgICAgICAgLi4uYWNjb3VudC50b1ByaW1pdGl2ZXMoKSxcbiAgICAgICAgICAgIC8vKiBGSVhNRTogdHJ5IHRvIGZpbmQgYW5vdGhlciB3YXkgdG8gbWFuYWdlIGRhdGUgdXBkYXRlIC0tPiBCZWNhdXNlIGl0IGNvdWxkIGJlIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIGdpdmVuIGFuZCB1cGRhdGVkIGRhdGVcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==