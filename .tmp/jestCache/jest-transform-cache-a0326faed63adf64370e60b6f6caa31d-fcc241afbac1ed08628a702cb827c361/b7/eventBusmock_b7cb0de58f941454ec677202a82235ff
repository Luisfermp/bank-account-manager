cf4091b964f878818c02a95b81f77d69
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class EventBusMock {
    constructor() {
        this.publishSpy = jest.fn();
    }
    async publish(events) {
        this.publishSpy(events);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addSubscribers(_subscribers) {
        //
    }
    assertLastPublishedEventIs(expectedEvent) {
        const publishSpyCalls = this.publishSpy.mock.calls, lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1], lastPublishedEvent = lastPublishSpyCall[0][0];
        expect(publishSpyCalls.length).toBeGreaterThan(0);
        expect(this.getDataFromDomainEvent(expectedEvent)).toMatchObject(this.getDataFromDomainEvent(lastPublishedEvent));
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    assertLastPublishedEventTypeIs(type) {
        const publishSpyCalls = this.publishSpy.mock.calls;
        expect(publishSpyCalls.length).toBeGreaterThan(0);
        // eslint-disable-next-line one-var
        const lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1], lastPublishedEvent = lastPublishSpyCall[0][0];
        expect(lastPublishedEvent).toBeInstanceOf(type);
    }
    assertLastPublishedEventsAre(events) {
        const publishSpyCalls = this.publishSpy.mock.calls, lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1], lastPublishedEvents = lastPublishSpyCall[0];
        expect(publishSpyCalls.length).toBeGreaterThan(0);
        expect(lastPublishedEvents).toHaveLength(events.length);
        lastPublishedEvents.forEach((publishedEvent, i) => {
            const expectedEvent = events[i];
            expect(this.getDataFromDomainEvent(expectedEvent)).toMatchObject(this.getDataFromDomainEvent(publishedEvent));
        });
    }
    assertPublishedEventsAre(events) {
        const { mock } = this.publishSpy, callsArgument = mock.calls.map((c) => this.getDataFromDomainEvent(c[0][0]));
        expect(mock.calls).toHaveLength(events.length);
        events.forEach((e) => {
            expect(callsArgument).toContainEqual(this.getDataFromDomainEvent(e));
        });
    }
    assertEmptyPublished() {
        const publishSpyCalls = this.publishSpy.mock.calls, lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1], lastPublishedEvents = lastPublishSpyCall[0];
        expect(lastPublishedEvents).toHaveLength(0);
    }
    assertNothingPublished() {
        const publishSpyCalls = this.publishSpy.mock.calls;
        expect(publishSpyCalls).toHaveLength(0);
    }
    getDataFromDomainEvent(event) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { eventId, occurredOn, ...attributes } = event;
        return attributes;
    }
}
exports.default = EventBusMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,