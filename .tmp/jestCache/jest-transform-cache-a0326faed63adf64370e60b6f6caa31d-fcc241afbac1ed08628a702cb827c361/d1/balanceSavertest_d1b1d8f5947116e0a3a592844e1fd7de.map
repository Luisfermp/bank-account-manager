{"file":"/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.test.ts","mappings":"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","names":[],"sources":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.test.ts"],"sourcesContent":["import BalanceSaver from '@backoffice/accounts/application/save/balanceSaver';\nimport SaveBalanceCommandHandler from '@backoffice/accounts/application/save/saveBalanceCommandHandler';\nimport AccountRepositoryMock from '@backoffice/accounts/__mocks__/accountRepository.mock';\nimport SaveBalanceCommandMother from '@backoffice/accounts/__mothers__/saveBalanceCommand.mother';\nimport EventBusMock from '@shared/__mocks__/eventBus.mock';\nimport AccountMother from '@backoffice/accounts/__mothers__/account.mother';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport BalanceMother from '@backoffice/accounts/__mothers__/balance.mother';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\n\ndescribe('balanceSaver', () => {\n    it('should create the balance when there isn\\'t stored in our system', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertSaveIsCalled();\n    });\n    it('should update the balance', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater),\n            expected = AccountMother.random({\n                id: account.id,\n                balance: BalanceMother.create(account.balance.value + command.amount)\n            });\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertSaveIsCalledWith(expected);\n    });\n\n    it('should publish AccountBalanceUpdatedDomainEvent', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        bus.assertLastPublishedEventTypeIs(AccountBalanceUpdatedDomainEvent);\n    });\n});\n"],"version":3}