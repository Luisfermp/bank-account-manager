{"file":"/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","mappings":";;;;;AAAA,yCAAyC;AACzC,sFAA8D;AAC9D,kFAA0D;AAE1D,8GAAiG;AACjG,iFAAyD;AACzD,6FAAqE;AAErE,MAAqB,OAAQ,SAAQ,uBAAa;IAO9C,YACI,EAAa,EACb,OAAgB,EAChB,SAA8B;QAE9B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACP,OAAO,IAAI,iBAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,SAAS;QACT,OAAO,IAAI,6BAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,EAClB,EAAE,EAAE,SAAS,EAAE,OAAO,EAC0B;QAChD,OAAO,IAAI,OAAO,CACd,IAAI,mBAAS,CAAC,EAAE,CAAC,EACjB,IAAI,iBAAO,CAAC,OAAO,CAAC,EACpB,IAAI,6BAAmB,CAAC,SAAS,CAAC,CACrC,CAAC;IACN,CAAC;IAED,YAAY;QAKR,MAAM,EACF,EAAE,EAAE,OAAO,EAAE,SAAS,EACzB,GAAG,IAAI,CAAC;QAET,OAAO;YACH,EAAE,EAAE,EAAE,CAAC,KAAK;YACZ,OAAO,EAAE,OAAO,CAAC,KAAK;YACtB,SAAS,EAAE,SAAS,CAAC,KAAK;SAC7B,CAAC;IACN,CAAC;IAED;;;;KAIC;IACD,aAAa,CAAC,MAAc;QACxB,MAAM,UAAU,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAElE,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,6BAAmB,CAAC,GAAG,EAAE,CAAC;QAE5C,IAAI,CAAC,MAAM,CAAC,IAAI,+BAAgC,CAAC;YAC7C,GAAG,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,EAAE,MAAM,CAAC,KAAK;SACvB,CAAC,CAAC,CAAC;IACR,CAAC;CACJ;AApED,0BAoEC","names":[],"sources":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport AccountId from '@backoffice/accounts/domain/accountId';\nimport Balance from '@backoffice/accounts/domain/balance';\nimport Amount from '@backoffice/accounts/domain/amount';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\nimport AggregateRoot from '@shared/domain/aggregateRoot';\nimport DatetimeValueObject from '@shared/domain/datetimeValueObject';\n\nexport default class Account extends AggregateRoot {\n    readonly id: AccountId;\n\n    private _balance: Balance;\n\n    private _updatedAt: DatetimeValueObject;\n\n    constructor(\n        id: AccountId,\n        balance: Balance,\n        updatedAt: DatetimeValueObject\n    ) {\n        super();\n        this.id = id;\n        this._balance = balance;\n        this._updatedAt = updatedAt;\n    }\n\n    get balance(): Balance {\n        return new Balance(this._balance.value);\n    }\n\n    get updatedAt(): DatetimeValueObject {\n        return new DatetimeValueObject(this._updatedAt.value);\n    }\n\n    static fromPrimitives({\n        id, updatedAt, balance\n    }: {id: string, balance: number, updatedAt: string }): Account {\n        return new Account(\n            new AccountId(id),\n            new Balance(balance),\n            new DatetimeValueObject(updatedAt)\n        );\n    }\n\n    toPrimitives(): {\n    id: string;\n    balance: number;\n    updatedAt: string\n    } {\n        const {\n            id, balance, updatedAt\n        } = this;\n\n        return {\n            id: id.value,\n            balance: balance.value,\n            updatedAt: updatedAt.value\n        };\n    }\n\n    /**\n   * This method allow us to update the balance for a given account\n   * @param {Amount} amount with the amount to increase/decrease the account balance\n   * @throws {InvalidArgumentError} Whenever the new balance is a negative number\n   */\n    updateBalance(amount: Amount): void {\n        const newBalance = new Balance(this.balance.value + amount.value);\n\n        this._balance = newBalance;\n        this._updatedAt = DatetimeValueObject.now();\n\n        this.record(new AccountBalanceUpdatedDomainEvent({\n            ...this.toPrimitives(),\n            amount: amount.value\n        }));\n    }\n}\n"],"version":3}