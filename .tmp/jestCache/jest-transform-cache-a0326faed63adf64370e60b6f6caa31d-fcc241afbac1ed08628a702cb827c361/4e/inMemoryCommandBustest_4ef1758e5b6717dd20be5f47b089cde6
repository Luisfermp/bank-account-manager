76818015372bf8e59aa49bc87ee56cfc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this */
/* eslint-disable max-classes-per-file */
const command_1 = __importDefault(require("@shared/domain/bus/command/command"));
const commandNotRegisteredError_1 = __importDefault(require("@shared/domain/bus/command/commandNotRegisteredError"));
const commandHandlersInformation_1 = __importDefault(require("@shared/infrastructure/commandBus/commandHandlersInformation"));
const inMemoryCommandBus_1 = __importDefault(require("@shared/infrastructure/commandBus/inMemoryCommandBus"));
class UnhandledCommand extends command_1.default {
}
UnhandledCommand.COMMAND_NAME = 'unhandled.command';
class HandledCommand extends command_1.default {
}
HandledCommand.COMMAND_NAME = 'handled.command';
class MyCommandHandler {
    subscribedTo() {
        return HandledCommand;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars
    async handle(_command) { }
}
describe('inMemoryCommandBus', () => {
    it('throws an error if dispatches a command without handler', async () => {
        expect.hasAssertions();
        const unhandledCommand = new UnhandledCommand(), commandHandlersInformation = new commandHandlersInformation_1.default([]), commandBus = new inMemoryCommandBus_1.default(commandHandlersInformation);
        let exception = null;
        try {
            await commandBus.dispatch(unhandledCommand);
        }
        catch (error) {
            exception = error;
        }
        expect(exception).toBeInstanceOf(commandNotRegisteredError_1.default);
        expect(exception.message).toBe("The command <UnhandledCommand> hasn't a command handler associated");
    });
    // eslint-disable-next-line jest/prefer-expect-assertions,jest/expect-expect
    it('accepts a command with handler', async () => {
        const handledCommand = new HandledCommand(), myCommandHandler = new MyCommandHandler(), commandHandlersInformation = new commandHandlersInformation_1.default([
            myCommandHandler
        ]), commandBus = new inMemoryCommandBus_1.default(commandHandlersInformation);
        await commandBus.dispatch(handledCommand);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvb3B0aXZhbWVkaWEvRG9jdW1lbnRzL1BlcnNvbmFsL2JhbmstYWNjb3VudC1tYW5hZ2VyL3NlcnZlci9jb250ZXh0cy9zaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvY29tbWFuZEJ1cy9pbk1lbW9yeUNvbW1hbmRCdXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsaUZBQXlEO0FBRXpELHFIQUE2RjtBQUM3Riw4SEFBc0c7QUFDdEcsOEdBQXNGO0FBRXRGLE1BQU0sZ0JBQWlCLFNBQVEsaUJBQU87O0FBQzNCLDZCQUFZLEdBQUcsbUJBQW1CLENBQUM7QUFHOUMsTUFBTSxjQUFlLFNBQVEsaUJBQU87O0FBQ3pCLDJCQUFZLEdBQUcsaUJBQWlCLENBQUM7QUFHNUMsTUFBTSxnQkFBZ0I7SUFDbEIsWUFBWTtRQUNSLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxrR0FBa0c7SUFDbEcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUF3QixJQUFrQixDQUFDO0NBQzNEO0FBRUQsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxFQUFFLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXZCLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxFQUMzQywwQkFBMEIsR0FBRyxJQUFJLG9DQUEwQixDQUFDLEVBQUUsQ0FBQyxFQUMvRCxVQUFVLEdBQUcsSUFBSSw0QkFBa0IsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBRXBFLElBQUksU0FBUyxHQUFRLElBQUksQ0FBQztRQUUxQixJQUFJO1lBQ0EsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDL0M7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDckI7UUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsY0FBYyxDQUFDLG1DQUF5QixDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzFCLG9FQUFvRSxDQUN2RSxDQUFDO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFFSCw0RUFBNEU7SUFDNUUsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzVDLE1BQU0sY0FBYyxHQUFHLElBQUksY0FBYyxFQUFFLEVBQ3ZDLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUUsRUFDekMsMEJBQTBCLEdBQUcsSUFBSSxvQ0FBMEIsQ0FBQztZQUN4RCxnQkFBZ0I7U0FDbkIsQ0FBQyxFQUNGLFVBQVUsR0FBRyxJQUFJLDRCQUFrQixDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFcEUsTUFBTSxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvb3B0aXZhbWVkaWEvRG9jdW1lbnRzL1BlcnNvbmFsL2JhbmstYWNjb3VudC1tYW5hZ2VyL3NlcnZlci9jb250ZXh0cy9zaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvY29tbWFuZEJ1cy9pbk1lbW9yeUNvbW1hbmRCdXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuaW1wb3J0IENvbW1hbmQgZnJvbSAnQHNoYXJlZC9kb21haW4vYnVzL2NvbW1hbmQvY29tbWFuZCc7XG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlciB9IGZyb20gJ0BzaGFyZWQvZG9tYWluL2J1cy9jb21tYW5kL2NvbW1hbmRIYW5kbGVyJztcbmltcG9ydCBDb21tYW5kTm90UmVnaXN0ZXJlZEVycm9yIGZyb20gJ0BzaGFyZWQvZG9tYWluL2J1cy9jb21tYW5kL2NvbW1hbmROb3RSZWdpc3RlcmVkRXJyb3InO1xuaW1wb3J0IENvbW1hbmRIYW5kbGVyc0luZm9ybWF0aW9uIGZyb20gJ0BzaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvY29tbWFuZEJ1cy9jb21tYW5kSGFuZGxlcnNJbmZvcm1hdGlvbic7XG5pbXBvcnQgSW5NZW1vcnlDb21tYW5kQnVzIGZyb20gJ0BzaGFyZWQvaW5mcmFzdHJ1Y3R1cmUvY29tbWFuZEJ1cy9pbk1lbW9yeUNvbW1hbmRCdXMnO1xuXG5jbGFzcyBVbmhhbmRsZWRDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG4gICAgc3RhdGljIENPTU1BTkRfTkFNRSA9ICd1bmhhbmRsZWQuY29tbWFuZCc7XG59XG5cbmNsYXNzIEhhbmRsZWRDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG4gICAgc3RhdGljIENPTU1BTkRfTkFNRSA9ICdoYW5kbGVkLmNvbW1hbmQnO1xufVxuXG5jbGFzcyBNeUNvbW1hbmRIYW5kbGVyIGltcGxlbWVudHMgQ29tbWFuZEhhbmRsZXI8SGFuZGxlZENvbW1hbmQ+IHtcbiAgICBzdWJzY3JpYmVkVG8oKTogSGFuZGxlZENvbW1hbmQge1xuICAgICAgICByZXR1cm4gSGFuZGxlZENvbW1hbmQ7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbixAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBhc3luYyBoYW5kbGUoX2NvbW1hbmQ6IEhhbmRsZWRDb21tYW5kKTogUHJvbWlzZTx2b2lkPiB7fVxufVxuXG5kZXNjcmliZSgnaW5NZW1vcnlDb21tYW5kQnVzJywgKCkgPT4ge1xuICAgIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgZGlzcGF0Y2hlcyBhIGNvbW1hbmQgd2l0aG91dCBoYW5kbGVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBleHBlY3QuaGFzQXNzZXJ0aW9ucygpO1xuXG4gICAgICAgIGNvbnN0IHVuaGFuZGxlZENvbW1hbmQgPSBuZXcgVW5oYW5kbGVkQ29tbWFuZCgpLFxuICAgICAgICAgICAgY29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24gPSBuZXcgQ29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24oW10pLFxuICAgICAgICAgICAgY29tbWFuZEJ1cyA9IG5ldyBJbk1lbW9yeUNvbW1hbmRCdXMoY29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24pO1xuXG4gICAgICAgIGxldCBleGNlcHRpb246IGFueSA9IG51bGw7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGNvbW1hbmRCdXMuZGlzcGF0Y2godW5oYW5kbGVkQ29tbWFuZCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBleGNlcHRpb24gPSBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cGVjdChleGNlcHRpb24pLnRvQmVJbnN0YW5jZU9mKENvbW1hbmROb3RSZWdpc3RlcmVkRXJyb3IpO1xuICAgICAgICBleHBlY3QoZXhjZXB0aW9uLm1lc3NhZ2UpLnRvQmUoXG4gICAgICAgICAgICBcIlRoZSBjb21tYW5kIDxVbmhhbmRsZWRDb21tYW5kPiBoYXNuJ3QgYSBjb21tYW5kIGhhbmRsZXIgYXNzb2NpYXRlZFwiXG4gICAgICAgICk7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgamVzdC9wcmVmZXItZXhwZWN0LWFzc2VydGlvbnMsamVzdC9leHBlY3QtZXhwZWN0XG4gICAgaXQoJ2FjY2VwdHMgYSBjb21tYW5kIHdpdGggaGFuZGxlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlZENvbW1hbmQgPSBuZXcgSGFuZGxlZENvbW1hbmQoKSxcbiAgICAgICAgICAgIG15Q29tbWFuZEhhbmRsZXIgPSBuZXcgTXlDb21tYW5kSGFuZGxlcigpLFxuICAgICAgICAgICAgY29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24gPSBuZXcgQ29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24oW1xuICAgICAgICAgICAgICAgIG15Q29tbWFuZEhhbmRsZXJcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgY29tbWFuZEJ1cyA9IG5ldyBJbk1lbW9yeUNvbW1hbmRCdXMoY29tbWFuZEhhbmRsZXJzSW5mb3JtYXRpb24pO1xuXG4gICAgICAgIGF3YWl0IGNvbW1hbmRCdXMuZGlzcGF0Y2goaGFuZGxlZENvbW1hbmQpO1xuICAgIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=