[["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.test.ts",{"fileContent":"import BalanceUpdater from '@backoffice/accounts/application/update/balanceUpdater';\nimport UpdateBalanceCommandHandler from '@backoffice/accounts/application/update/updateBalanceCommandHandler';\nimport AccountNotFound from '@backoffice/accounts/domain/accountNotFound';\nimport AccountRepositoryMock from '@backoffice/accounts/__mocks__/accountRepository.mock';\nimport UpdateBalanceCommandMother from '@backoffice/accounts/__mothers__/updateBalanceCommand.mother';\nimport EventBusMock from '@shared/__mocks__/eventBus.mock';\nimport AccountMother from '@backoffice/accounts/__mothers__/account.mother';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport BalanceMother from '@backoffice/accounts/__mothers__/balance.mother';\nimport InvalidArgumentError from '@shared/domain/invalidArgumentError';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\n\ndescribe('balanceUpdater', () => {\n    it('should throw AccountNotFount when try to update balance for an unexistent account', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        await expect(handler.handle(command)).rejects.toThrow(AccountNotFound);\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n    });\n\n    it('should throw InvalidArgumentError when the new balance is negative', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithNegativeAmount(),\n            account = AccountMother.randomWithAmountZero(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).rejects.toThrow(InvalidArgumentError);\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n    });\n\n    it('should update the balance', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater),\n            expected = AccountMother.random({\n                id: account.id,\n                balance: BalanceMother.create(account.balance.value + command.amount)\n            });\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertUpdateIsCalled(expected);\n    });\n\n    it('should publish AccountBalanceUpdatedDomainEvent', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = UpdateBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceUpdater(repository, bus),\n            handler = new UpdateBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        bus.assertLastPublishedEventTypeIs(AccountBalanceUpdatedDomainEvent);\n    });\n});\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountNotFound.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mocks__/accountRepository.mock.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/updateBalanceCommand.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mocks__/eventBus.mock.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/account.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/balance.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/nullable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/amount.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEventSubscriber.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/datetimeValueObject.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.ts",{"fileContent":"import AccountRepository from '@backoffice/accounts/domain/accountRepository';\nimport { EventBus } from '@shared/domain/bus/event/eventBus';\nimport type AccountId from '@backoffice/accounts/domain/accountId';\nimport type Amount from '@backoffice/accounts/domain/amount';\nimport AccountNotFound from '@backoffice/accounts/domain/accountNotFound';\n\nexport default class BalanceUpdater {\n    private repository: AccountRepository;\n\n    private bus: EventBus;\n\n    constructor(repository: AccountRepository, bus: EventBus) {\n        this.repository = repository;\n        this.bus = bus;\n    }\n\n    async run(accountId: AccountId, amount: Amount): Promise<void> {\n        const account = await this.repository.get(accountId);\n\n        if (!account) {\n            throw new AccountNotFound(accountId.value);\n        }\n\n        account.updateBalance(amount);\n\n        await this.repository.update(account);\n        await this.bus.publish(account.pullDomainEvents());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountNotFound.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/nullable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountNotFound.ts",{"fileContent":"export default class AccountNotFound extends Error {\n    constructor(accountId: string) {\n        super(`Account ${accountId} doesn't exist`);\n    }\n}\n","resolvedModuleNames":[]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommandHandler.ts",{"fileContent":"/* eslint-disable class-methods-use-this */\nimport BalanceUpdater from '@backoffice/accounts/application/update/balanceUpdater';\nimport Command from '@shared/domain/bus/command/command';\nimport { CommandHandler } from '@shared/domain/bus/command/commandHandler';\nimport Amount from '@backoffice/accounts/domain/amount';\nimport UpdateBalanceCommand from '@backoffice/accounts/application/update/updateBalanceCommand';\nimport AccountId from '@backoffice/accounts/domain/accountId';\n\nexport default class UpdateBalanceCommandHandler implements CommandHandler<UpdateBalanceCommand> {\n    private updater: BalanceUpdater;\n\n    constructor(updater: BalanceUpdater) {\n        this.updater = updater;\n    }\n\n    subscribedTo(): Command {\n        return UpdateBalanceCommand;\n    }\n\n    async handle(command: UpdateBalanceCommand): Promise<void> {\n        const accountId = new AccountId(command.accountId),\n            amount = new Amount(command.amount);\n\n        await this.updater.run(accountId, amount);\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/balanceUpdater.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountNotFound.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts",{"fileContent":"import NumberValueObject from '@shared/domain/numberValueObject';\n\nexport default class Amount extends NumberValueObject {\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts",{"fileContent":"export default class NumberValueObject {\n    readonly value: number;\n\n    constructor(value: number) {\n        this.value = value;\n    }\n}\n","resolvedModuleNames":[]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommand.ts",{"fileContent":"import Command from '@shared/domain/bus/command/command';\n\ntype Params = {\n  accountId: string,\n  amount: number\n}\n\nexport default class UpdateBalanceCommand extends Command {\n    readonly accountId: string;\n\n    readonly amount: number;\n\n    constructor({ accountId, amount }: Params) {\n        super();\n        this.accountId = accountId;\n        this.amount = amount;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts",{"fileContent":"export default abstract class Command {}\n","resolvedModuleNames":[]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts",{"fileContent":"import Uuid from '@shared/domain/uuid';\n\nexport default class AccountId extends Uuid {}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts",{"fileContent":"import { v4 } from 'uuid';\nimport validate from 'uuid-validate';\nimport InvalidArgumentError from '@shared/domain/invalidArgumentError';\nimport { Comparable } from '@shared/domain/comparable';\n\nexport default class Uuid implements Comparable {\n    readonly value: string;\n\n    constructor(value: string) {\n        this.ensureIsValidUuid(value);\n\n        this.value = value;\n    }\n\n    static random(): Uuid {\n        return new Uuid(v4());\n    }\n\n    static clone(id: Uuid): Uuid {\n        return new Uuid(id.value);\n    }\n\n    private ensureIsValidUuid(id: string): void {\n        if (!validate(id)) {\n            throw new InvalidArgumentError(\n                `<${this.constructor.name}> does not allow the value <${id}>`\n            );\n        }\n    }\n\n    toString(): string {\n        return this.value;\n    }\n\n    equalsTo(other: Uuid): boolean {\n        return this.toString() === other.toString();\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts",{"fileContent":"export default class InvalidArgumentError extends Error {}\n","resolvedModuleNames":[]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mocks__/accountRepository.mock.ts",{"fileContent":"/* eslint-disable jest/no-standalone-expect */\nimport Account from '@backoffice/accounts/domain/account';\nimport AccountId from '@backoffice/accounts/domain/accountId';\nimport AccountRepository from '@backoffice/accounts/domain/accountRepository';\nimport { Nullable } from '@shared/domain/nullable';\n\nexport default class AccountRepositoryMock implements AccountRepository {\n    private getFn = jest.fn();\n\n    private saveFn = jest.fn();\n\n    get(accountId: AccountId): Promise<Nullable<Account>> {\n        return this.getFn(accountId);\n    }\n\n    whenGetThenReturn(account: Account): void {\n        this.getFn.mockResolvedValue(account);\n    }\n\n    assertGetIsCalled(accountId: AccountId): void {\n        expect(this.getFn).toHaveBeenCalledWith(accountId);\n    }\n\n    save(account: Account): Promise<void> {\n        return this.saveFn(account);\n    }\n\n    assertSaveIsCalled(): void {\n        // eslint-disable-next-line jest/prefer-called-with\n        expect(this.saveFn).toHaveBeenCalled();\n    }\n\n    assertSaveIsCalledWith(account: Account): void {\n        const { calls } = this.saveFn.mock,\n            lastCall = calls[calls.length - 1],\n            accountUpdated: Account = lastCall[0],\n            primitives = accountUpdated.toPrimitives();\n        expect(primitives).toStrictEqual({\n            ...account.toPrimitives(),\n            //* FIXME: try to find another way to manage date update --> Because it could be a difference between given and updated date\n            updatedAt: expect.any(String)\n        });\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/nullable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/aggregateRoot.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/updateBalanceCommand.mother.ts",{"fileContent":"import UpdateBalanceCommand from '@backoffice/accounts/application/update/updateBalanceCommand';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport AmountMother from '@backoffice/accounts/__mothers__/amount.mother';\n\nexport default class UpdateBalanceCommandMother {\n    static create(params: { accountId: string, amount: number}): UpdateBalanceCommand {\n        return new UpdateBalanceCommand(params);\n    }\n\n    static random(): UpdateBalanceCommand {\n        return UpdateBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.random().value\n        });\n    }\n\n    static randomWithPositiveAmount(): UpdateBalanceCommand {\n        return UpdateBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.randomPositive().value\n        });\n    }\n\n    static randomWithNegativeAmount(): UpdateBalanceCommand {\n        return UpdateBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.randomNegative().value\n        });\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/update/updateBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/amount.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts",{"fileContent":"import * as faker from 'faker';\nimport AccountId from '@backoffice/accounts/domain/accountId';\n\nexport default class AccountIdMother {\n    static create(value: string): AccountId {\n        return new AccountId(value);\n    }\n\n    static random(): AccountId {\n        return AccountIdMother.create(faker.datatype.uuid());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/amount.mother.ts",{"fileContent":"import Amount from '@backoffice/accounts/domain/amount';\nimport IntegerMother from '@shared/__mothers__/integer.mother';\n\nexport default class AmountMother {\n    static create(value: number): Amount {\n        return new Amount(value);\n    }\n\n    static random(): Amount {\n        return AmountMother.create(IntegerMother.random());\n    }\n\n    static randomPositive(): Amount {\n        return AmountMother.create(IntegerMother.randomPositive());\n    }\n\n    static randomNegative(): Amount {\n        return AmountMother.create(IntegerMother.randomNegative());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts",{"fileContent":"import MotherCreator from '@shared/__mothers__/motherCreator.mother';\n\nexport default class IntegerMother {\n    static random(max?: number): number {\n        return MotherCreator.random().datatype.number(max);\n    }\n\n    static randomPositive(max?: number): number {\n        return MotherCreator.random().datatype.number({ min: 0, max });\n    }\n\n    static randomNegative(): number {\n        return MotherCreator.random().datatype.number({ max: -1 });\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts",{"fileContent":"import * as faker from 'faker';\n\nexport default class MotherCreator {\n    static random(): Faker.FakerStatic {\n        return faker;\n    }\n}\n","resolvedModuleNames":[]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mocks__/eventBus.mock.ts",{"fileContent":"/* eslint-disable jest/no-standalone-expect */\n/* eslint-disable class-methods-use-this */\nimport { EventBus } from '@shared/domain/bus/event/eventBus';\nimport { DomainEvent } from '@shared/domain/bus/event/domainEvent';\nimport { DomainEventSubscriber } from '@shared/domain/bus/event/domainEventSubscriber';\n\nexport default class EventBusMock implements EventBus {\n    private publishSpy = jest.fn();\n\n    async publish(events: DomainEvent[]): Promise<void> {\n        this.publishSpy(events);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addSubscribers(_subscribers: DomainEventSubscriber<DomainEvent>[]): void {\n        //\n    }\n\n    assertLastPublishedEventIs(expectedEvent: DomainEvent): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvent = lastPublishSpyCall[0][0];\n\n        expect(publishSpyCalls.length).toBeGreaterThan(0);\n\n        expect(this.getDataFromDomainEvent(expectedEvent)).toMatchObject(\n            this.getDataFromDomainEvent(lastPublishedEvent)\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    assertLastPublishedEventTypeIs(type: any): void {\n        const publishSpyCalls = this.publishSpy.mock.calls;\n\n        expect(publishSpyCalls.length).toBeGreaterThan(0);\n\n        // eslint-disable-next-line one-var\n        const lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvent = lastPublishSpyCall[0][0];\n\n        expect(lastPublishedEvent).toBeInstanceOf(type);\n    }\n\n    assertLastPublishedEventsAre(events: DomainEvent[]): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvents = lastPublishSpyCall[0];\n\n        expect(publishSpyCalls.length).toBeGreaterThan(0);\n        expect(lastPublishedEvents).toHaveLength(events.length);\n\n        lastPublishedEvents.forEach((publishedEvent: DomainEvent, i: number) => {\n            const expectedEvent = events[i];\n\n            expect(this.getDataFromDomainEvent(expectedEvent)).toMatchObject(\n                this.getDataFromDomainEvent(publishedEvent)\n            );\n        });\n    }\n\n    assertPublishedEventsAre(events: DomainEvent[]): void {\n        const { mock } = this.publishSpy,\n            callsArgument = mock.calls.map((c) => this.getDataFromDomainEvent(c[0][0]));\n\n        expect(mock.calls).toHaveLength(events.length);\n\n        events.forEach((e) => {\n            expect(callsArgument).toContainEqual(this.getDataFromDomainEvent(e));\n        });\n    }\n\n    assertEmptyPublished(): void {\n        const publishSpyCalls = this.publishSpy.mock.calls,\n            lastPublishSpyCall = publishSpyCalls[publishSpyCalls.length - 1],\n            lastPublishedEvents = lastPublishSpyCall[0];\n\n        expect(lastPublishedEvents).toHaveLength(0);\n    }\n\n    assertNothingPublished(): void {\n        const publishSpyCalls = this.publishSpy.mock.calls;\n\n        expect(publishSpyCalls).toHaveLength(0);\n    }\n\n    private getDataFromDomainEvent(event: DomainEvent): any {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { eventId, occurredOn, ...attributes } = event;\n\n        return attributes;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEventSubscriber.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/account.mother.ts",{"fileContent":"import Account from '@backoffice/accounts/domain/account';\nimport AccountId from '@backoffice/accounts/domain/accountId';\nimport Balance from '@backoffice/accounts/domain/balance';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport BalanceMother from '@backoffice/accounts/__mothers__/balance.mother';\nimport DatetimeValueObject from '@shared/domain/datetimeValueObject';\nimport DatetimeValueObjectMother from '@shared/__mothers__/datetimeValueObject.mother';\n\nexport default class AccountMother {\n    static create({ id, balance, updatedAt }: {\n    id: AccountId,\n      balance: Balance,\n      updatedAt: DatetimeValueObject\n  }): Account {\n        return new Account(id, balance, updatedAt);\n    }\n\n    static random(overwrites?: { id?: AccountId, balance?: Balance}): Account {\n        return AccountMother.create({\n            id: overwrites?.id ?? AccountIdMother.random(),\n            balance: overwrites?.balance ?? BalanceMother.random(),\n            updatedAt: DatetimeValueObjectMother.random()\n        });\n    }\n\n    static randomWithAmountZero(): Account {\n        return AccountMother.create({\n            id: AccountIdMother.random(),\n            balance: BalanceMother.create(0),\n            updatedAt: DatetimeValueObjectMother.random()\n        });\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/balance.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/datetimeValueObject.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/aggregateRoot.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/positiveNumberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/stringValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts",{"fileContent":"/* eslint-disable no-underscore-dangle */\nimport AccountId from '@backoffice/accounts/domain/accountId';\nimport Balance from '@backoffice/accounts/domain/balance';\nimport Amount from '@backoffice/accounts/domain/amount';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\nimport AggregateRoot from '@shared/domain/aggregateRoot';\nimport DatetimeValueObject from '@shared/domain/datetimeValueObject';\nimport AccountBalanceCreatedDomainEvent from '@backoffice/accounts/domain/accountBalanceCreated';\n\nexport default class Account extends AggregateRoot {\n    readonly id: AccountId;\n\n    private _balance: Balance;\n\n    private _updatedAt: DatetimeValueObject;\n\n    constructor(\n        id: AccountId,\n        balance: Balance,\n        updatedAt: DatetimeValueObject\n    ) {\n        super();\n        this.id = id;\n        this._balance = balance;\n        this._updatedAt = updatedAt;\n    }\n\n    get balance(): Balance {\n        return new Balance(this._balance.value);\n    }\n\n    get updatedAt(): DatetimeValueObject {\n        return new DatetimeValueObject(this._updatedAt.value);\n    }\n\n    static fromPrimitives({\n        id, updatedAt, balance\n    }: {id: string, balance: number, updatedAt: string }): Account {\n        return new Account(\n            new AccountId(id),\n            new Balance(balance),\n            new DatetimeValueObject(updatedAt)\n        );\n    }\n\n    toPrimitives(): {\n    id: string;\n    balance: number;\n    updatedAt: string\n    } {\n        const {\n            id, balance, updatedAt\n        } = this;\n\n        return {\n            id: id.value,\n            balance: balance.value,\n            updatedAt: updatedAt.value\n        };\n    }\n\n    /**\n   * This method allow us to update the balance for a given account\n   * @param {Amount} amount with the amount to increase/decrease the account balance\n   * @throws {InvalidArgumentError} Whenever the new balance is a negative number\n   */\n    updateBalance(amount: Amount): void {\n        const newBalance = new Balance(this.balance.value + amount.value);\n\n        this._balance = newBalance;\n        this._updatedAt = DatetimeValueObject.now();\n\n        this.record(new AccountBalanceUpdatedDomainEvent({\n            ...this.toPrimitives(),\n            amount: amount.value\n        }));\n    }\n\n    /**\n   * This method allow us to create the balance for a given account\n   * @param {Amount} amount with the amount to increase/decrease the account balance\n   * @throws {InvalidArgumentError} Whenever the new balance is a negative number\n   */\n    static createBalance(id: AccountId, amount: Amount): Account {\n        const account = new Account(\n            id,\n            new Balance(amount.value),\n            DatetimeValueObject.now()\n        );\n\n        account.record(\n            new AccountBalanceCreatedDomainEvent({\n                ...account.toPrimitives(),\n                amount: amount.value\n            })\n        );\n\n        return account;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/aggregateRoot.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceCreated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/stringValueObject.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts",{"fileContent":"import NumberValueObject from '@shared/domain/numberValueObject';\n\nexport default class Balance extends NumberValueObject {}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/positiveNumberValueObject.ts",{"fileContent":"import { Comparable } from '@shared/domain/comparable';\nimport InvalidArgumentError from '@shared/domain/invalidArgumentError';\n\nexport default class PositiveNumberValueObject implements Comparable {\n    readonly value: number;\n\n    constructor(value: number) {\n        this.ensureIsValid(value);\n        this.value = value;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    ensureIsValid(value: number): void {\n        if (value < 0) {\n            throw new InvalidArgumentError(`${this.constructor.name} must be greather or equal than 0`);\n        }\n    }\n\n    equalsTo(other: PositiveNumberValueObject): boolean {\n        return this.value === other.value;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts",{"fileContent":"import { DomainEvent } from '@shared/domain/bus/event/domainEvent';\n\ntype AccountBalanceUpdatedDomainEventBody = {\n  id: string;\n  balance: number;\n  updatedAt: string;\n  amount: number\n}\n\nexport default class AccountBalanceUpdatedDomainEvent extends DomainEvent {\n    static readonly EVENT_NAME = 'comalatech.backoffice.1.event.account.balance.updated';\n\n    readonly id: string;\n\n    readonly balance: number;\n\n    readonly updatedAt: string;\n\n    readonly amount: number;\n\n    constructor({\n        id: accountId,\n        balance,\n        updatedAt,\n        amount,\n        eventId,\n        occurredOn\n    }: AccountBalanceUpdatedDomainEventBody & { eventId?: string; occurredOn?: Date }) {\n        super(AccountBalanceUpdatedDomainEvent.EVENT_NAME, accountId, eventId, occurredOn);\n        this.id = accountId;\n        this.balance = balance;\n        this.updatedAt = updatedAt;\n        this.amount = amount;\n    }\n\n    toPrimitives(): unknown {\n        const {\n            amount, id, balance, updatedAt\n        } = this;\n        return {\n            amount,\n            id,\n            balance,\n            updatedAt\n        };\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts",{"fileContent":"import Uuid from '@shared/domain/uuid';\n\nexport abstract class DomainEvent {\n    static EVENT_NAME: string;\n\n    static fromPrimitives: (...args: any[]) => any;\n\n    readonly aggregateId: string;\n\n    readonly eventId: string;\n\n    readonly occurredOn: Date;\n\n    readonly eventName: string;\n\n    constructor(\n        eventName: string,\n        aggregateId: string,\n        eventId?: string,\n        occurredOn?: Date\n    ) {\n        this.aggregateId = aggregateId;\n        this.eventId = eventId || Uuid.random().value;\n        this.occurredOn = occurredOn || new Date();\n        this.eventName = eventName;\n    }\n\n    abstract toPrimitives(): unknown;\n}\n\nexport type DomainEventClass = {\n    EVENT_NAME: string;\n    fromPrimitives(...args: any[]): DomainEvent;\n};\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/aggregateRoot.ts",{"fileContent":"import { DomainEvent } from '@shared/domain/bus/event/domainEvent';\n\nexport default abstract class AggregateRoot {\n    private domainEvents: Array<DomainEvent>;\n\n    constructor() {\n        this.domainEvents = [];\n    }\n\n    pullDomainEvents(): Array<DomainEvent> {\n        return this.domainEvents;\n    }\n\n    record(event: DomainEvent): void {\n        this.domainEvents.push(event);\n    }\n\n    abstract toPrimitives(): any;\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts",{"fileContent":"import moment from 'moment';\nimport InvalidArgumentError from '@shared/domain/invalidArgumentError';\nimport StringValueObject from '@shared/domain/stringValueObject';\n\nexport default class DatetimeValueObject extends StringValueObject {\n    constructor(datetime?: string) {\n        DatetimeValueObject.ensureIsValidDate(datetime);\n\n        super(moment(datetime).toISOString());\n    }\n\n    private static ensureIsValidDate(value?: string): void {\n        const date = moment(value);\n\n        if (!date.isValid()) {\n            throw new InvalidArgumentError(`<${this.name}> doesn't allow the value <${value}>`);\n        }\n    }\n\n    static now(): DatetimeValueObject {\n        return new DatetimeValueObject(new Date(Date.now()).toISOString());\n    }\n\n    toSeconds(): number {\n        return moment(this.value).unix();\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/stringValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/stringValueObject.ts",{"fileContent":"import { Comparable } from '@shared/domain/comparable';\n\nexport default abstract class StringValueObject implements Comparable {\n    readonly value: string;\n\n    constructor(value: string) {\n        this.value = value;\n    }\n\n    toString(): string {\n        return this.value;\n    }\n\n    equalsTo(other: StringValueObject): boolean {\n        return this.value === other.value;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/comparable.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/balance.mother.ts",{"fileContent":"import Balance from '@backoffice/accounts/domain/balance';\nimport IntegerMother from '@shared/__mothers__/integer.mother';\n\nexport default class BalanceMother {\n    static create(value: number): Balance {\n        return new Balance(value);\n    }\n\n    static random(): Balance {\n        return BalanceMother.create(IntegerMother.randomPositive());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/positiveNumberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/datetimeValueObject.mother.ts",{"fileContent":"import DatetimeValueObject from '@shared/domain/datetimeValueObject';\nimport MotherCreator from '@shared/__mothers__/motherCreator.mother';\nimport moment from 'moment';\n\nexport default class DatetimeValueObjectMother {\n    static create(datetime?: string): DatetimeValueObject {\n        return new DatetimeValueObject(datetime);\n    }\n\n    static random(): DatetimeValueObject {\n        const date = MotherCreator.random().date.recent();\n\n        return DatetimeValueObjectMother.create(date.toISOString());\n    }\n\n    static olderThanToday(): DatetimeValueObject {\n        const date = MotherCreator.random().date.past(undefined, moment().subtract(1, 'day').toDate());\n\n        return DatetimeValueObjectMother.create(date.toISOString());\n    }\n\n    static olderThanOneHour(): DatetimeValueObject {\n        const date = MotherCreator.random().date.past(undefined, moment().subtract(1, 'hour').toDate());\n\n        return DatetimeValueObjectMother.create(date.toISOString());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/motherCreator.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/invalidArgumentError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/stringValueObject.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.test.ts",{"fileContent":"import BalanceSaver from '@backoffice/accounts/application/save/balanceSaver';\nimport SaveBalanceCommandHandler from '@backoffice/accounts/application/save/saveBalanceCommandHandler';\nimport AccountRepositoryMock from '@backoffice/accounts/__mocks__/accountRepository.mock';\nimport SaveBalanceCommandMother from '@backoffice/accounts/__mothers__/saveBalanceCommand.mother';\nimport EventBusMock from '@shared/__mocks__/eventBus.mock';\nimport AccountMother from '@backoffice/accounts/__mothers__/account.mother';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport BalanceMother from '@backoffice/accounts/__mothers__/balance.mother';\nimport AccountBalanceUpdatedDomainEvent from '@backoffice/accounts/domain/accountBalanceUpdated';\nimport AccountBalanceCreatedDomainEvent from '@backoffice/accounts/domain/accountBalanceCreated';\n\ndescribe('balanceSaver', () => {\n    it('should create the balance when there isn\\'t stored in our system', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertSaveIsCalled();\n    });\n\n    it('should publish AccountBalanceCreatedDomainEvent', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        bus.assertLastPublishedEventTypeIs(AccountBalanceCreatedDomainEvent);\n    });\n    it('should update the balance', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater),\n            expected = AccountMother.random({\n                id: account.id,\n                balance: BalanceMother.create(account.balance.value + command.amount)\n            });\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        repository.assertSaveIsCalledWith(expected);\n    });\n\n    it('should publish AccountBalanceUpdatedDomainEvent', async () => {\n        expect.hasAssertions();\n        const repository = new AccountRepositoryMock(),\n            bus = new EventBusMock(),\n            command = SaveBalanceCommandMother.randomWithPositiveAmount(),\n            account = AccountMother.random(),\n            updater = new BalanceSaver(repository, bus),\n            handler = new SaveBalanceCommandHandler(updater);\n\n        repository.whenGetThenReturn(account);\n\n        await expect(handler.handle(command)).resolves.toBeUndefined();\n        repository.assertGetIsCalled(AccountIdMother.create(command.accountId));\n        bus.assertLastPublishedEventTypeIs(AccountBalanceUpdatedDomainEvent);\n    });\n});\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mocks__/accountRepository.mock.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/saveBalanceCommand.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mocks__/eventBus.mock.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/account.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/balance.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceCreated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/nullable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/amount.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEventSubscriber.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/datetimeValueObject.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.ts",{"fileContent":"import AccountRepository from '@backoffice/accounts/domain/accountRepository';\nimport { EventBus } from '@shared/domain/bus/event/eventBus';\nimport type AccountId from '@backoffice/accounts/domain/accountId';\nimport type Amount from '@backoffice/accounts/domain/amount';\nimport Account from '@backoffice/accounts/domain/account';\n\nexport default class BalanceSaver {\n    private repository: AccountRepository;\n\n    private bus: EventBus;\n\n    constructor(repository: AccountRepository, bus: EventBus) {\n        this.repository = repository;\n        this.bus = bus;\n    }\n\n    async run(accountId: AccountId, amount: Amount): Promise<void> {\n        let account = await this.repository.get(accountId);\n\n        if (!account) account = Account.createBalance(accountId, amount);\n        else account.updateBalance(amount);\n\n        await this.repository.save(account);\n        await this.bus.publish(account.pullDomainEvents());\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/nullable.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/balance.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceUpdated.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/aggregateRoot.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/datetimeValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceCreated.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommandHandler.ts",{"fileContent":"/* eslint-disable class-methods-use-this */\nimport BalanceSaver from '@backoffice/accounts/application/save/balanceSaver';\nimport Command from '@shared/domain/bus/command/command';\nimport { CommandHandler } from '@shared/domain/bus/command/commandHandler';\nimport Amount from '@backoffice/accounts/domain/amount';\nimport SaveBalanceCommand from '@backoffice/accounts/application/save/saveBalanceCommand';\nimport AccountId from '@backoffice/accounts/domain/accountId';\n\nexport default class SaveBalanceCommandHandler implements CommandHandler<SaveBalanceCommand> {\n    private saver: BalanceSaver;\n\n    constructor(updater: BalanceSaver) {\n        this.saver = updater;\n    }\n\n    subscribedTo(): Command {\n        return SaveBalanceCommand;\n    }\n\n    async handle(command: SaveBalanceCommand): Promise<void> {\n        const accountId = new AccountId(command.accountId),\n            amount = new Amount(command.amount);\n\n        await this.saver.run(accountId, amount);\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/balanceSaver.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountRepository.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/eventBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/account.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/numberValueObject.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommand.ts",{"fileContent":"import Command from '@shared/domain/bus/command/command';\n\ntype Params = {\n  accountId: string,\n  amount: number\n}\n\nexport default class SaveBalanceCommand extends Command {\n    readonly accountId: string;\n\n    readonly amount: number;\n\n    constructor({ accountId, amount }: Params) {\n        super();\n        this.accountId = accountId;\n        this.amount = amount;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/saveBalanceCommand.mother.ts",{"fileContent":"import SaveBalanceCommand from '@backoffice/accounts/application/save/saveBalanceCommand';\nimport AccountIdMother from '@backoffice/accounts/__mothers__/accountId.mother';\nimport AmountMother from '@backoffice/accounts/__mothers__/amount.mother';\n\nexport default class SaveBalanceCommandMother {\n    static create(params: { accountId: string, amount: number}): SaveBalanceCommand {\n        return new SaveBalanceCommand(params);\n    }\n\n    static random(): SaveBalanceCommand {\n        return SaveBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.random().value\n        });\n    }\n\n    static randomWithPositiveAmount(): SaveBalanceCommand {\n        return SaveBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.randomPositive().value\n        });\n    }\n\n    static randomWithNegativeAmount(): SaveBalanceCommand {\n        return SaveBalanceCommandMother.create({\n            accountId: AccountIdMother.random().value,\n            amount: AmountMother.randomNegative().value\n        });\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/application/save/saveBalanceCommand.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/accountId.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/__mothers__/amount.mother.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountId.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/amount.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/__mothers__/integer.mother.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/backoffice/accounts/domain/accountBalanceCreated.ts",{"fileContent":"import { DomainEvent } from '@shared/domain/bus/event/domainEvent';\n\ntype AccountBalanceCreatedDomainEventBody = {\n  id: string;\n  balance: number;\n  updatedAt: string;\n  amount: number\n}\n\nexport default class AccountBalanceCreatedDomainEvent extends DomainEvent {\n    static readonly EVENT_NAME = 'comalatech.backoffice.1.event.account.balance.created';\n\n    readonly id: string;\n\n    readonly balance: number;\n\n    readonly updatedAt: string;\n\n    readonly amount: number;\n\n    constructor({\n        id: accountId,\n        balance,\n        updatedAt,\n        amount,\n        eventId,\n        occurredOn\n    }: AccountBalanceCreatedDomainEventBody & { eventId?: string; occurredOn?: Date }) {\n        super(AccountBalanceCreatedDomainEvent.EVENT_NAME, accountId, eventId, occurredOn);\n        this.id = accountId;\n        this.balance = balance;\n        this.updatedAt = updatedAt;\n        this.amount = amount;\n    }\n\n    toPrimitives(): unknown {\n        const {\n            amount, id, balance, updatedAt\n        } = this;\n        return {\n            amount,\n            id,\n            balance,\n            updatedAt\n        };\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/event/domainEvent.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/uuid.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/inMemoryCommandBus.test.ts",{"fileContent":"/* eslint-disable class-methods-use-this */\n/* eslint-disable max-classes-per-file */\nimport Command from '@shared/domain/bus/command/command';\nimport { CommandHandler } from '@shared/domain/bus/command/commandHandler';\nimport CommandNotRegisteredError from '@shared/domain/bus/command/commandNotRegisteredError';\nimport CommandHandlersInformation from '@shared/infrastructure/commandBus/commandHandlersInformation';\nimport InMemoryCommandBus from '@shared/infrastructure/commandBus/inMemoryCommandBus';\n\nclass UnhandledCommand extends Command {\n    static COMMAND_NAME = 'unhandled.command';\n}\n\nclass HandledCommand extends Command {\n    static COMMAND_NAME = 'handled.command';\n}\n\nclass MyCommandHandler implements CommandHandler<HandledCommand> {\n    subscribedTo(): HandledCommand {\n        return HandledCommand;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars\n    async handle(_command: HandledCommand): Promise<void> {}\n}\n\ndescribe('inMemoryCommandBus', () => {\n    it('throws an error if dispatches a command without handler', async () => {\n        expect.hasAssertions();\n\n        const unhandledCommand = new UnhandledCommand(),\n            commandHandlersInformation = new CommandHandlersInformation([]),\n            commandBus = new InMemoryCommandBus(commandHandlersInformation);\n\n        let exception: any = null;\n\n        try {\n            await commandBus.dispatch(unhandledCommand);\n        } catch (error) {\n            exception = error;\n        }\n\n        expect(exception).toBeInstanceOf(CommandNotRegisteredError);\n        expect(exception.message).toBe(\n            \"The command <UnhandledCommand> hasn't a command handler associated\"\n        );\n    });\n\n    // eslint-disable-next-line jest/prefer-expect-assertions,jest/expect-expect\n    it('accepts a command with handler', async () => {\n        const handledCommand = new HandledCommand(),\n            myCommandHandler = new MyCommandHandler(),\n            commandHandlersInformation = new CommandHandlersInformation([\n                myCommandHandler\n            ]),\n            commandBus = new InMemoryCommandBus(commandHandlersInformation);\n\n        await commandBus.dispatch(handledCommand);\n    });\n});\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandNotRegisteredError.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/commandHandlersInformation.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/inMemoryCommandBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandBus.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandNotRegisteredError.ts",{"fileContent":"import Command from '@shared/domain/bus/command/command';\n\nexport default class CommandNotRegisteredError extends Error {\n    constructor(command: Command) {\n        super(\n            `The command <${command.constructor.name}> hasn't a command handler associated`\n        );\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/commandHandlersInformation.ts",{"fileContent":"import Command from '@shared/domain/bus/command/command';\nimport { CommandHandler } from '@shared/domain/bus/command/commandHandler';\nimport CommandNotRegisteredError from '@shared/domain/bus/command/commandNotRegisteredError';\n\nexport default class CommandHandlersInformation {\n    private commandHandlersMap: Map<Command, CommandHandler<Command>>;\n\n    constructor(commandHandlers: Array<CommandHandler<Command>>) {\n        this.commandHandlersMap = this.formatHandlers(commandHandlers);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    private formatHandlers(\n        commandHandlers: Array<CommandHandler<Command>>\n    ): Map<Command, CommandHandler<Command>> {\n        const handlersMap = new Map();\n\n        commandHandlers.forEach((commandHandler) => {\n            handlersMap.set(commandHandler.subscribedTo(), commandHandler);\n        });\n\n        return handlersMap;\n    }\n\n    public search(command: Command): CommandHandler<Command> {\n        const commandHandler = this.commandHandlersMap.get(command.constructor);\n\n        if (!commandHandler) {\n            throw new CommandNotRegisteredError(command);\n        }\n\n        return commandHandler;\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandNotRegisteredError.ts"]}],["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/inMemoryCommandBus.ts",{"fileContent":"import Command from '@shared/domain/bus/command/command';\nimport { CommandBus } from '@shared/domain/bus/command/commandBus';\nimport CommandHandlersInformation from '@shared/infrastructure/commandBus/commandHandlersInformation';\n\nexport default class InMemoryCommandBus implements CommandBus {\n    private commandHandlersInformation: CommandHandlersInformation;\n\n    constructor(commandHandlersInformation: CommandHandlersInformation) {\n        this.commandHandlersInformation = commandHandlersInformation;\n    }\n\n    async dispatch(command: Command): Promise<void> {\n        const handler = this.commandHandlersInformation.search(command);\n\n        await handler.handle(command);\n    }\n}\n","resolvedModuleNames":["/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/command.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandBus.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/infrastructure/commandBus/commandHandlersInformation.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandHandler.ts","/home/optivamedia/Documents/Personal/bank-account-manager/server/contexts/shared/domain/bus/command/commandNotRegisteredError.ts"]}]]